package nebpoints.nebpoints.dataFiles;

import org.bukkit.Bukkit;
import org.bukkit.Sound;
import org.bukkit.command.ConsoleCommandSender;

import java.util.Random;


public class gameDataCopy {
        public ConsoleCommandSender console = Bukkit.getServer().getConsoleSender();

        public String lobbyWorld = "overworld";
        public String gameWorld = "glidemaps";

        public String coolElytra = "minecraft:elytra{Enchantments:[{id:binding_curse,lvl:1},{id:vanishing_curse,lvl:1},{id:unbreaking,lvl:5}]}";

        public String[] musicDiscs = {"13", "blocks", "cat", "far", "mall", "otherside", "pigstep", "wait"};
        public Sound[] musicDiscIds = {Sound.MUSIC_DISC_13, Sound.MUSIC_DISC_BLOCKS, Sound.MUSIC_DISC_CAT, Sound.MUSIC_DISC_FAR, Sound.MUSIC_DISC_MALL, Sound.MUSIC_DISC_OTHERSIDE, Sound.MUSIC_DISC_PIGSTEP, Sound.MUSIC_DISC_WAIT};

        public String startSound = "minecraft:entity.experience_orb.pickup";//1.5
        public String finishSound = "minecraft:ui.toast.challenge_complete";//1.65
        public String timerTick = "minecraft:block.note_block.chime";//1.6
        public String timerGo = "minecraft:item.trident.thunder";//1.85
        public String wrongWay = "minecraft:block.note_block.bass";//0.3
        public Integer timerLength = 10;
        public Integer gameLength = 400;

        public double[] lobbyCoords = {42.5, 65.00, -1.5, 90.0, 0.0};
        public double gameX = 2138.48, gameY = 225.00, gameZ = 3072.44, facingLR = 90.0, facingUD = 25.00;
        public double offX = 0.0, offZ = -4.0;

        //name of each map
        String[] mapName = {
                "cavern",
                "temple",
                "canyon",
                "mobs",
                "dragon",
                "shrunk",
                "yeti",
                "kraken",
        };
        String[] rankmapName = {
                "yeti",
                "kraken",
        };

        //checkpoint number of each map
        int[] cpCount = {
                10,
                11,
                10,
                12,
                10,
                16,
                10,
                15
        };
        double[][] cpRespawnOff = {
                {0.0, -4.0},
                {0.0, -2.0},
                {0.0, 0.0},
                {0.0, -2.0},
                {0.0, 2.0},
                {0.0, -2.0},
                {-2.0, 0.0},
                {0.0, 2.0},
        };
        //The coord book for respawning at checkpoints
        double[][][] cpRespawnCoords = {
                //Maps{Checkpoints}
                {
                        //Checkpoints{X, Y, Z}
                        {2132.5, 225.00, 3072.5, 90.0, 25.00},//cavern
                        {1981.63, 189.32, 3115.79, 0.25, 29.88},
                        {2004.70, 156.94, 3360.77, -90.56, 31.15},
                        {1991.58, 149.75, 3224.03, -257.12, 26.06},
                        {2125.93, 81.00, 3169.37, -629.70, 27.12},
                        {2025.06, 103.97, 3144.68, 103.66, 23.17},
                        {2021.12, 96.23, 3002.41, 335.57, 22.95},
                        {2170.84, 101.10, 3072.48, 995.55, 35.47},
                        {2086.92, 113.19, 3092.83, 1081.06, 25.50},
                        {2086.42, 38.86, 3283.28, 2160.39, 12.98},
                },
                {
                        {3141.5, 230.00, 2867.5, 364.98, 28.68},//temple
                        {3140.57, 203.77, 3105.09, 695.33, 35.26},
                        {3146.60, 145.38, 3181.58, 339.72, 11.50},
                        {3158.25, 145.50, 3336.90, 633.16, 21.04},
                        {3236.94, 156.20, 3280.79, 628.70, 21.68},
                        {3345.59, 163.62, 3259.19, 630.40, 36.74},
                        {3318.40, 123.03, 3275.34, 900.50, 3.01},
                        {3319.02, 115.19, 3014.47, -190.80, 29.32},
                        {3328.92, 58.94, 3022.03, 0.79, 37.38},
                        {3335.24, 54.00, 3269.87, 360.64, 27.12},
                        {3335.51, 34.05, 3390.80, 720.70, 30.51},
                },
                {
                        {1207.5, 237.00, 2788.5, 723.97, 30.51},//canyon
                        {1209.63, 209.14, 2960.18, 695.12, 14.39},
                        {1203.77, 175.83, 3235.70, 751.56, 26.06},
                        {1318.56, 126.90, 3356.12, 899.86, 20.33},
                        {1347.99, 119.77, 3212.49, 811.38, 60.43},
                        {1241.75, 52.56, 3147.94, 887.12, 15.24},
                        {1137.01, 101.13, 3054.34, 835.36, 17.57},
                        {1161.27, 59.19, 3203.32, 715.26, 21.81},
                        {1129.00, 48.72, 3269.03, 789.31, -7.47},
                        {1102.67, 43.81, 3430.97, 720.14, 13.54},
                },
                {
                        {2235.47, 231.00, 1298.47, 812.76, 27.76},//mobs
                        {2128.91, 201.09, 1263.67, 942.52, 17.21},
                        {2162.59, 200.62, 1013.48, 551.78, 28.60},
                        {2200.73, 150.96, 947.96, 81.07, 12.36},
                        {1922.51, 157.37, 1012.29, -55.44, 21.64},
                        {2084.87, 162.44, 1067.57, 271.80, 32.40},
                        {2085.28, 116.19, 1060.64, 379.40, 8.14},
                        {2082.43, 144.36, 1265.21, 297.12, 20.16},
                        {2158.49, 53.46, 1197.91, 531.52, -3.29},
                        {2214.26, 31.45, 970.26, 1012.35, 14.86},
                        {2229.69, 60.12, 1100.22, 2511.20, 13.17},
                        {2360.27, 39.04, 1240.62, 2069.19, 18.87},
                },
                {
                        {679.5, 230.00, 331.5, -91.51, 32.93},//dragon
                        {868.51, 177.39, 275.40, -783.52, 14.27},
                        {1048.08, 168.73, 270.14, 155.22, 36.40},
                        {834.65, 110.52, 329.53, -300.92, 20.56},
                        {736.65, 138.46, 340.97, -831.49, 22.51},
                        {790.58, 109.69, 278.52, -1259.42, 30.32},
                        {791.95, 79.69, 55.08, -1261.81, 28.15},
                        {795.95, 96.38, -81.57, -525.30, 38.57},
                        {871.08, 54.57, -16.73, 7.00, 25.98},
                        {881.44, 36.40, 208.91, 16.98, 6.89},
                },
                {
                        {3220.52, 200.00, 1076.48, -269.66, 51.22},//shrunk
                        {3040.87, 195.25, 1047.37, 39.36, 17.59},
                        {2988.81, 180.24, 1171.10, -725.88, 22.53},
                        {3051.81, 170.02, 1228.68, -635.39, 6.91},
                        {3056.32, 173.17, 1260.93, -724.15, 21.02},
                        {3046.87, 166.09, 1288.79, -991.71, 17.11},
                        {2914.48, 141.69, 1299.14, -882.99, 21.02},
                        {2945.32, 137.00, 1259.99, -541.43, 29.91},
                        {3029.53, 144.90, 1199.46, -394.73, 17.98},
                        {2945.31, 164.02, 1272.52, -540.34, 29.48},
                        {2945.02, 200.00, 1255.96, -898.39, 26.87},
                        {2946.47, 164.03, 1013.78, -890.37, 13.20},
                        {3002.36, 144.92, 902.84, -800.10, 21.88},
                        {3049.77, 144.93, 951.65, -899.70, 29.48},
                        {3156.90, 139.33, 863.75, -808.34, 24.70},
                        {3275.18, 115.49, 864.08, -810.51, 12.55},
                },
                {
                        {3119.48, 224.00, -151.41, 12.28, 22.30},//yeti
                        {3148.20, 181.52, 139.11, 8.59, 14.70},
                        {3240.10, 185.53, 316.69, 36.58, 20.13},
                        {3188.92, 136.50, 98.41, 198.68, 15.79},
                        {3188.76, 94.22, 152.11, 284.18, 22.95},
                        {3199.38, 91.33, 263.81, 768.30, 15.35},
                        {3026.19, 87.42, 277.01, 916.91, 21.86},
                        {3083.99, 94.62, 146.25, 898.90, 19.26},
                        {3001.20, 94.42, 13.67, 637.19, 65.48},
                        {2985.05, 28.56, 244.44, 720.08, -0.92},
                },
                {
                        {1660.60, 159.00, 338.48, -87.60, 9.71},//kraken
                        {1798.20, 132.62, 343.83, 293.01, 20.78},
                        {1944.81, 119.59, 344.75, 197.75, 16.33},
                        {1832.33, 108.14, 297.20, -29.60, 14.11},
                        {1955.40, 92.04, 379.66, -131.68, 7.14},
                        {1997.60, 88.37, 266.33, -181.10, -25.33},
                        {1987.12, 144.87, 193.97, -309.56, 22.41},
                        {1985.64, 116.04, 184.72, -633.14, 23.51},
                        {1855.14, 103.99, 221.37, -1003.88, 28.81},
                        {1791.10, 64.94, 350.63, -624.90, 10.14},
                        {1691.38, 56.83, 321.38, -540.20, 1.81},
                        {1764.88, 71.48, 186.48, -447.97, 10.48},
                        {1919.32, 56.83, 207.24, -392.14, 19.48},
                        {1879.74, 24.16, 229.40, -269.80, 9.49},
                        {1751.57, 18.89, 228.60, -268.70, 8.86},
                },
        };
        //The coord book for setting the start of the box
        double[][][] cpBoxCoords = {
                //Maps{Checkpoints}
                {
                        //Checkpoints{X, Y, Z}
                        {2125.17, 208.80, 3043.80},//cavern
                        {1970.30, 130.00, 3120.39},
                        {2020.45, 140.00, 3344.30},
                        {1990.44, 137.00, 3213.30},
                        {2121.30, 70.00, 3162.30},
                        {2014.30, 90.00, 3130.30},
                        {2015.45, 70.00, 3000.50},
                        {2175.77, 90.00, 3060.30},
                        {2065.30, 90.00, 3110.30},
                        {2075.30, 25.50, 3288.51},
                },
                {
                        {3132.30, 223.00, 2864.30},//temple
                        {3100.36, 175.00, 3119.41},
                        {3125.61, 130.00, 3177.80},
                        {3167.85, 130.00, 3325.45},
                        {3258.70, 140.00, 3270.42},
                        {3367.69, 140.00, 3250.32},
                        {3310.30, 110.00, 3260.66},
                        {3305.33, 100.00, 3005.39},
                        {3300.10, 35.85, 3018.69},
                        {3310.80, 25.74, 3257.34},
                        {3325.31, 5.00, 3375.30},
                },
                {
                        {1189.77, 225.55, 2784.30},//canyon
                        {1195.30, 184.00, 2963.56},
                        {1181.58, 155.52, 3230.29},
                        {1304.26, 108.02, 3345.74},
                        {1273.64, 99.66, 3190.82},
                        {1221.28, 39.96, 3146.75},
                        {1128.97, 88.96, 3041.82},
                        {1154.22, 44.73, 3202.52},
                        {1110.05, 37.69, 3261.76},
                        {1074.96, 5.26, 3445.56},
                },
                {
                        {2226.30, 221.37, 1286.79},//mobs //12 16 16
                        {2111.51, 171.82, 1246.35},//45.0 60.0 20.0
                        {2145.50, 171.72, 999.99},//35.0 35.0 10.0
                        {2187.09, 127.78, 930.23},//10.0 40.0 35.0
                        {1915.61, 133.01, 990.32},//25.0 50.0 10.0
                        {2090.42, 138.23, 1056.58},//10.0 20.0 25.0
                        {2068.11, 96.60, 1071.45},//20.0 35.0 15.0
                        {2065.29, 105.60, 1253.69},//45.0 40.0 13.0
                        {2136.28, 39.11, 1183.66},//40.0 40.0 15.0
                        {2219.66, 15.40, 964.63},//8.0 25.0 20.0
                        {2210.11, 3.45, 1116.38},//60.0 80.0 20.0
                        {2369.05, 4.35, 1225.53},//15.0 60.0 35.0
                },
                {
                        {672.84, 218.03, 324.61},//dragon //15 30 20
                        {869.20, 164.23, 258.83},//20 36 50
                        {1034.76, 153.91, 264.91},//20 25 16
                        {819.84, 76.11, 300.16},//20 70 70
                        {737.13, 120.16, 324.67},//10 25 25
                        {776.91, 95.87, 270.40},//30 30 10
                        {749.34, 63.03, 34.46},//80 50 10
                        {793.03, 63.21, -121.73},//30 20 20
                        {830.97, 36.50, -5.38},//65 80 15
                        {859.51, 21.56, 212.34},//35 90 40
                },
                {
                        {3216.53, 194.27, 1063.35},//shrunk //10 10 20
                        {3035.25, 162.61, 1035.07},//10 100 40
                        {2977.87, 160.67, 1177.82},//40 100 10
                        {3022.39, 157.90, 1219.98},//10 20 20
                        {3050.90, 160.43, 1275.49},//15 12 10
                        {3038.32, 154.70, 1279.21},//10 16 16
                        {2913.95, 128.63, 1276.77},//15 10 5
                        {2929.29, 125.89, 1243.47},//30 20 10
                        {3030.37, 128.90, 1195.51},//10 20 20
                        {2960.78, 150.44, 1265.01},//16 20 15
                        {2925.21, 165.73, 1178.79},//50 25 15
                        {2933.91, 153.71, 1006.48},//40 20 10
                        {2966.35, 133.59, 895.12},//60 20 25
                        {3044.00, 137.09, 928.12},//10 15 12
                        {3152.68, 133.35, 858.22},//15 12 14
                        {3278.66, 104.58, 855.77},//40 20 25
                },
                {
                        {3109.50, 216.98, -157.20},//yeti //3124.11 228.22 -147.47
                        {3122.93, 158.62, 135.95},//3163.54 203.44 153.33
                        {3217.15, 164.62, 307.29},//3241.66 203.81 322.76
                        {3162.73, 119.47, 89.40},//3218.64 190.65 105.48
                        {3189.23, 74.44, 146.32},//3200.83 100.79 180.52
                        {3175.28, 57.11, 259.85},//3203.30 101.00 276.25
                        {3021.23, 73.15, 255.19},//3053.85 121.14 275.84
                        {3057.22, 46.04, 127.21},//3101.81 126.92 147.50
                        {3010.93, 39.22, 4.14},//3025.66 91.84 28.15
                        {2971.39, 7.19, 249.65},//2998.87 45.69 260.84
                },
                {
                        {1650.70, 153.5, 329.73},//kraken //1665.98 163.73 351.39
                        {1806.56, 95.83, 324.37},//1823.32 156.28 373.91
                        {1936.50, 91.50, 310.48},//1966.72 148.70 328.76
                        {1819.86, 85.84, 289.51},//1849.93 138.90 313.61
                        {1943.10, 68.59, 366.50},//1962.94 134.95 398.11
                        {1984.60, 71.96, 266.61},//2005.43 99.68 274.80
                        {1975.82, 130.7, 191.24},//1982.52 166.73 209.91
                        {1980.36, 97.30, 176.95},//1989.67 120.91 196.59
                        {1847.24, 88.27, 214.87},//1851.90 115.62 234.09
                        {1769.10, 49.11, 337.09},//1777.87 69.56 365.66
                        {1675.86, 38.28, 309.85},//1710.94 65.29 317.01
                        {1763.21, 37.91, 172.41},//1776.34 104.25 222.19
                        {1913.96, 30.14, 206.13},//1933.21 78.58 220.60
                        {1868.43, 3.130, 221.36},//1877.35 35.75 245.05
                        {1727.08, 1.370, 199.67},//1745.41 23.82 251.86
                },
        };
        //The coord book for calculating the end
        double[][][] cpBoxOff = {
                //Maps{Checkpoints}
                {
                        //Checkpoints{X, Y, Z}
                        {25.0, 30.0, 40.0},//cavern
                        {25.0, 70.0, 5.0},
                        {5.0, 40.0, 32.0},
                        {5.0, 20.0, 21.0},
                        {5.0, 30.0, 15.0},
                        {5.0, 25.0, 20.0},
                        {25.0, 60.0, 25.0},
                        {5.0, 40.0, 20.0},
                        {40.0, 40.0, 30.0},
                        {20.0, 25.0, 5.0},
                },
                {
                        {15.0, 10.0, 10.0},//temple
                        {80.0, 60.0, 5.0},
                        {40.0, 15.0, 5.0},
                        {5.0, 50.0, 25.0},
                        {5.0, 40.0, 20.0},
                        {5.0, 20.0, 50.0},
                        {15.0, 25.0, 5.0},
                        {25.0, 20.0, 5.0},
                        {50.0, 40.0, 5.0},
                        {35.0, 50.0, 10.0},
                        {20.0, 20.0, 5.0},
                },
                {
                        {30.0, 25.0, 10.0},//canyon
                        {35.0, 50.0, 20.0},
                        {40.0, 50.0, 30.0},
                        {40.0, 30.0, 11.0},
                        {90.0, 10.0, 50.0},
                        {25.0, 22.0, 25.0},
                        {15.0, 33.0, 20.0},
                        {24.0, 22.0, 15.0},
                        {13.0, 20.0, 22.0},
                        {50.0, 120.0, 5.0},
                },
                {
                        {12.0, 16.0, 16.0},//mobs
                        {45.0, 60.0, 20.0},
                        {35.0, 35.0, 10.0},
                        {10.0, 40.0, 35.0},
                        {25.0, 50.0, 10.0},
                        {10.0, 20.0, 25.0},
                        {20.0, 35.0, 15.0},
                        {45.0, 40.0, 13.0},
                        {40.0, 40.0, 15.0},
                        {8.0, 25.0, 20.0},
                        {60.0, 80.0, 20.0},
                        {15.0, 60.0, 35.0},
                },
                {
                        {15.0, 30.0, 20.0},//dragon
                        {20.0, 36.0, 50.0},
                        {20.0, 25.0, 15.0},
                        {20.0, 70.0, 70.0},
                        {10.0, 25.0, 25.0},
                        {30.0, 30.0, 10.0},
                        {80.0, 50.0, 10.0},
                        {30.0, 20.0, 20.0},
                        {65.0, 80.0, 15.0},
                        {35.0, 90.0, 40.0},
                },
                {
                        {10.0, 10.0, 20.0},//shrunk
                        {10.0, 100.0, 40.0},
                        {40.0, 100.0, 10.0},
                        {10.0, 20.0, 20.0},
                        {15.0, 12.0, 10},
                        {10.0, 16.0, 16.0},
                        {15.0, 10.0, 5.0},
                        {30.0, 20.0, 10.0},
                        {10.0, 20.0, 20.0},
                        {16.0, 20.0, 15.0},
                        {50.0, 25.0, 15.0},
                        {40.0, 20.0, 10.0},
                        {60.0, 20.0, 25.0},
                        {10.0, 15.0, 12.0},
                        {15.0, 12.0, 14.0},
                        {40.0, 20.0, 25.0},
                },
                {
                        {3124.11-3109.50, 228.22-216.98, -147.47+157.20},//yeti
                        {3163.54-3122.93, 203.44-158.62, 153.33-135.95},
                        {3241.66-3217.15, 203.81-164.62, 322.76-307.29},
                        {3218.64-3162.73, 190.65-119.47, 105.48-89.40},
                        {3200.83-3189.23, 100.79-74.44, 180.52-146.32},
                        {3203.30-3175.28, 101.00-57.11, 276.25-259.85},
                        {3053.85-3021.23, 121.14-73.15, 275.84-255.19},
                        {3101.81-3057.22, 126.92-46.04, 147.50-127.21},
                        {3025.66-3010.93, 91.84-39.22, 28.15-4.14},
                        {2998.87-2971.39, 45.69-7.19, 260.84-249.65},
                },
                {
                        {1665.98-1650.70, 163.73-153.5, 351.39-329.73}, //kraken
                        {1823.32-1806.56, 156.28-95.83, 373.91-324.37},
                        {1966.72-1936.50, 148.70-91.50, 328.76-310.48},
                        {1849.93-1819.86, 138.90-85.84, 313.61-289.51},
                        {1962.94-1943.10, 134.95-68.59, 398.11-366.50},
                        {2005.43-1984.60, 99.680-71.96, 274.80-266.61},
                        {1982.52-1975.82, 166.73-130.7, 209.91-191.24},
                        {1989.67-1980.36, 120.91-97.30, 196.59-176.95},
                        {1851.90-1847.24, 115.62-88.27, 234.09-214.87},
                        {1777.87-1769.10, 69.560-49.11, 365.66-337.09},
                        {1710.94-1675.86, 65.290-38.28, 317.01-309.85},
                        {1776.34-1763.21, 104.25-37.91, 222.19-172.41},
                        {1933.21-1913.96, 78.580-30.14, 220.60-206.13},
                        {1877.35-1868.43, 35.750-3.130, 245.05-221.36},
                        {1745.41-1727.08, 23.820-1.370, 251.86-199.67},
                },
        };


        public String getRandomMusic() {
                Random rand = new Random();
                int rando = rand.nextInt(musicDiscs.length);
                return musicDiscs[rando];
        }
        public int getRandomMusicId() {
                return new Random().nextInt(musicDiscs.length);
        }



        //get data depending on the map and checkpoint
        public String[] getMaps(){
                return mapName;
        }
        public String[] getRankedMaps(){
                return rankmapName;
        }
        public String getMapName(int mapID){
                return mapName[mapID];
        }
        public int getCpCount(int mapID) { return cpCount[mapID]; }
        //get spawn offsets
        public double getRespawnOffX(int mapID) { return cpRespawnOff[mapID][0]; }
        public double getRespawnOffZ(int mapID){ return cpRespawnOff[mapID][1]; }
        //get coord data (respawn coord)
        public double getRespawnX(int mapID, int cpID) { return cpRespawnCoords[mapID][cpID][0]; }
        public double getRespawnY(int mapID, int cpID) {
                return cpRespawnCoords[mapID][cpID][1];
        }
        public double getRespawnZ(int mapID, int cpID) {
                return cpRespawnCoords[mapID][cpID][2];
        }
        public double getRespawnLR(int mapID, int cpID) {
                return cpRespawnCoords[mapID][cpID][3];
        }
        public double getRespawnUD(int mapID, int cpID) {
                return cpRespawnCoords[mapID][cpID][4];
        }

        //get coord data (box corner A coord)
        public double getX(int mapID, int cpID){
                return cpBoxCoords[mapID][cpID][0];
        }
        public double getY(int mapID, int cpID){
                return cpBoxCoords[mapID][cpID][1];
        }
        public double getZ(int mapID, int cpID){
                return cpBoxCoords[mapID][cpID][2];
        }

        //get coord data (box corner B-A coord)
        public double getXOff(int mapID, int cpID){
                return cpBoxOff[mapID][cpID][0];
        }
        public double getYOff(int mapID, int cpID){
                return cpBoxOff[mapID][cpID][1];
        }
        public double getZOff(int mapID, int cpID){
                return cpBoxOff[mapID][cpID][2];
        }

        //get coord data (box corner B coord)
        public double getXEnd(int mapID, int cpID) { return getX(mapID, cpID)+getXOff(mapID, cpID); }
        public double getYEnd(int mapID, int cpID) { return getY(mapID, cpID)+getYOff(mapID, cpID); }
        public double getZEnd(int mapID, int cpID){
                return getZ(mapID, cpID)+getZOff(mapID, cpID);
        }

        //get coord data (check player in 1 dimensional box)
        public boolean isInX(int mapID, int cpID, double plyrX) {
                double x = getX(mapID, cpID);
                double xo = getXOff(mapID, cpID);
                double xe = getXEnd(mapID, cpID);

                if (xo >= 0.0){
                return (plyrX >= x && plyrX <= xe);
                } else {
                return (plyrX <= x && plyrX >= xe);
                }
        }
        public boolean isInY(int mapID, int cpID, double plyrY) {
                double y = getY(mapID, cpID);
                double yo = getYOff(mapID, cpID);
                double ye = getYEnd(mapID, cpID);

                if (yo >= 0.0){
                return (plyrY >= y && plyrY <= ye);
                } else {
                return (plyrY <= y && plyrY >= ye);
                }
        }
        public boolean isInZ(int mapID, int cpID, double plyrZ) {
                double z = getZ(mapID, cpID);
                double zo = getZOff(mapID, cpID);
                double ze = getZEnd(mapID, cpID);

                if (zo >= 0.0){
                return (plyrZ >= z && plyrZ <= ze);
                } else {
                return (plyrZ <= z && plyrZ >= ze);
                }
        }
        //get coord data (check player in 3 dimensional box)
        public boolean isInBox(int mapID, int cpID, double plyrX, double plyrY, double plyrZ) {
                return (isInX(mapID, cpID, plyrX) && isInY(mapID, cpID, plyrY) && isInZ(mapID, cpID, plyrZ));
        }
}
